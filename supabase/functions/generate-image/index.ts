import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    if (!openAIApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    const { prompt, size = "1024x1024" } = await req.json();

    if (!prompt) {
      throw new Error('Prompt is required');
    }

    console.log('Generating image with prompt:', prompt);

    // Helper to call OpenAI Images API
    const makeOpenAIRequest = async (body: Record<string, unknown>) => {
      return await fetch('https://api.openai.com/v1/images/generations', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(body),
      });
    };

    // Try GPT Image first, then gracefully fall back if access is restricted
    let response = await makeOpenAIRequest({
      model: 'gpt-image-1',
      prompt,
      n: 1,
      size,
      quality: 'high',
      output_format: 'png',
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('OpenAI API error (gpt-image-1):', errorText);

      // If org not verified for gpt-image-1, fall back to a model available without verification
      if (response.status === 403 && errorText.includes('must be verified')) {
        console.log('Falling back to dall-e-2 due to org verification requirement.');
        response = await makeOpenAIRequest({
          model: 'dall-e-2',
          prompt,
          n: 1,
          size, // dall-e-2 supports 256x256, 512x512, 1024x1024
          response_format: 'b64_json',
        });

        if (!response.ok) {
          const fallbackError = await response.text();
          console.error('OpenAI API error (dall-e-2):', fallbackError);
          throw new Error(`OpenAI API error: ${response.status} ${fallbackError}`);
        }

        const dataFallback = await response.json();
        if (!dataFallback.data || dataFallback.data.length === 0) {
          throw new Error('No image generated by fallback model');
        }

        const imageBase64 = dataFallback.data[0].b64_json;
        return new Response(JSON.stringify({
          imageBase64,
          success: true,
          model_used: 'dall-e-2',
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        });
      }

      throw new Error(`OpenAI API error: ${response.status} ${errorText}`);
    }

    const data = await response.json();
    if (!data.data || data.data.length === 0) {
      throw new Error('No image generated');
    }

    const imageBase64 = data.data[0].b64_json;
    return new Response(JSON.stringify({
      imageBase64,
      success: true,
      model_used: 'gpt-image-1',
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('Error in generate-image function:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      success: false 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});